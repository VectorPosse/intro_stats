[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "",
    "text": "Introduction\nWelcome to statistics!",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "Getting started",
    "text": "Getting started\nThis book assumes you are using the R language and the RStudio software. If you are using this book for a class, your teacher will let you know if you need to download R and RStudio on your own device or if you will be using R and RStudio through a web browser. If you are using a web browser, you might be using R installed on a central server, or you might be using it through a cloud service (like Posit Cloud, for example). If you are using this book for self-study, you can choose how you want to interact with R and RStudio. (R and RStudio can be downloaded and installed on your machine for free. Cloud services often have a selection of free and paid tiers.)\nOnce you get RStudio or Posit up and running, you are all set to go to Chapter 1 and get started.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#history-and-goals",
    "href": "index.html#history-and-goals",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "History and goals",
    "text": "History and goals\nIn 2015, a group of interdisciplinary faculty at Westminster University (then called Westminster College) in Salt Lake City, Utah, started a process that led to the creation of a new Data Science program. Preparatory to creating a more rigorous introductory statistics course using the statistical software R, I wrote a series of 22 modules that filled a gap in the R training literature. Most R training at the time was focused either on learning to program using R as a computer language, or using R to do sophisticated statistical analysis. We needed our students to use R as a tool for elementary statistical methods and we needed the learning curve to be as gentle as possible. I decided early on that to make the modules more useful, they needed to be structured more like an interactive textbook rather than just a series of lab exercises, and so I spent the summer of 2016 writing a free, open-source, self-contained, and nearly fully-featured introductory statistics textbook. The first sections of the newly-created DATA 220 were offered in Fall, 2016, using the materials I created.\nSince then, I have been revising and updating the modules a little every semester. At some point, however, it became clear that some big changes needed to happen:\n\nThe modules were more or less aligned with the OpenIntro book Introduction to Statistics with Randomization and Simulation (ISRS) by David Diez, Christopher Barr, and Mine Çetinkaya-Rundel. That book has now been supplanted by Introduction to Modern Statistics (IMS) by Mine Çetinkaya-Rundel and Johanna Hardin, also published through the OpenIntro project.\nThe initial materials were written mostly using a mix of base R tools, some tidyverse tools, and the amazing resources of the mosaic package. I wanted to convert everything to be more aligned with tidyverse packages now that they are mature, well-supported, and becoming a de facto standard for doing data analysis in R.\nThe initial choice of data sets that served as examples and exercises for students was guided by convenience. As I had only a short amount of time to write an entire textbook from scratch, I tended to grab the first data sets I could find that met the conditions needed for the statistical principles I was trying to illustrate. It has become clear in the last few years that the material will be more engaging with more interesting data sets. Ideally, we should use at least some data sets that speak to issues of social justice.\nMaking statistics more inclusive requires us to confront some ugly chapters in the development of the subject. Statistical principles are often named after people. (These are supposedly the people who “discovered” the principle, but keep in mind Stigler’s Law of Eponymy which states that no scientific discovery is truly named after its original discoverer. In a neat bit of self-referential irony, Stephen Stigler was not the first person to make this observation.) The beliefs of some of these people were problematic. For example, Francis Galton (famous for the concept of “regression to the mean”), Karl Pearson (of the Pearson correlation coefficient), and Ronald Fisher (famous for many things, including the P-value) were all deeply involved in the eugenics movement of the late 19th and early 20th century. The previous modules almost never referenced this important historical background and context. Additionally, it’s important to discuss ethics, whether that be issues of data provenance, data manipulation, choice of analytic techniques, framing conclusions, and many other topics.\n\nThe efforts of my revisions are here online. I’ve tried to address all the concerns mentioned above:\n\nThe chapter are arranged to align somewhat with IMS. There isn’t quite a one-to-one correspondence, but teachers who want to use the chapters of my book to supplement instruction from IMS, or vice versa, should be able to do so pretty easily. In the Appendix, I’ve included a concordance that shows how the books’ chapters match up, along with some notes that explain when one book does more or less than the other.\nThe book is now completely aligned with the tidyverse and other packages that are designed to integrate into the tidyverse. All plotting is done with ggplot2 and all data manipulation is done with dplyr, tidyr, and forcats. Tables are created using tabyl from the janitor package. Inference is taught using the cool tools in the infer package.\nI have made an effort to find more interesting data sets. It’s tremendously difficult to find data that is both fascinating on its merits and also meets the pedagogical requirements of an introductory statistics course. I would like to use even more data that addresses social justice issues. There’s some in the book now, and I plan to incorporate even more in the future as I come across data sets that are suitable.\nWhen statistical tools are introduced, I have tried to give a little historical context about their development if I can. I’ve also tried to frame every step of the inferential process as a decision-making process that requires not only analytical expertise, but also solid ethical grounding. Again, there’s a lot more I could do here, and my goal is to continue to develop more such discussion as I can in future revisions.\n\nNow, instead of a bunch of separate module files, all the material is gathered in one place as chapters of a book. In each chapter (starting with Chapter 2), students can download the chapter as a Quarto document, open it in RStudio, and work through the material.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#philosophy-and-pedagogy",
    "href": "index.html#philosophy-and-pedagogy",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "Philosophy and pedagogy",
    "text": "Philosophy and pedagogy\nTo understand my statistics teaching philosophy, it’s worth telling you a little about my background in statistics.\nAt the risk of undermining my own credibility, I’d like to tell you about the first statistics class I took. In the mid-2000s, I was working on my Ph.D. at the University of California, San Diego, studying geometric topology. To make a little extra money and get some teaching experience under my belt, I started teaching night and summer classes at Miramar College, a local community college in the San Diego Community College District. I had been there for several semesters, mostly teaching pre-calculus, calculus, and other lower-division math classes. One day, I got a call from my department chair with my assignment for the upcoming semester. I was scheduled to teach intro stats. I was about to respond, “Oh, I’ve never taken a stats class before.” But remembering this was the way I earned money to be able to live in expensive San Diego County, I said, “Sounds great. By the way, do you happen to have an extra copy of the textbook we’ll be using?”\nYes, the first statistics class I took was the one I taught. Not ideal, I know.\nI was lucky to start teaching with Intro Stats by De Veaux, Velleman, and Bock, a book that was incredibly well-written and included a lot of resources for teachers like me. (I learned quickly that I wasn’t the only math professor in the world who got thrown into teaching statistics classes with little-to-no training.) I got my full-time appointment at Westminster in 2008 and continued to teach intro stats classes for many years to follow. As I mentioned earlier, we started the Data Science program at Westminster in 2016 and moved everything from our earlier hodgepodge of calculators, spreadsheets, and SPSS, over to R.\nEventually, I got interested in Bayesian statistics and read everything I could get my hands on. I became convinced that Bayesian statistics is the right way to do statistical analysis. I started teaching special topics courses in Bayesian Data Analysis and working with students on research projects that involved Bayesian methods. If it were up to me, every introductory statistics class in the world would be taught using Bayesian methods. I know that sounds like a strong statement. (And I put it in boldface, so it looks even stronger.) But I truly believe that in an alternate universe where Fisher and his disciples didn’t “win” the stats wars of the 20th century (and perhaps one in which computing power got a little more advanced a little earlier in the development of statistics), we would all be Bayesians. Bayesian thinking is far more intuitive and more closely aligned with our intuitions about probabilities and uncertainty.\nUnfortunately, our current universe timeline didn’t play out that way. So we are left with frequentism. It’s not that I necessarily object to frequentist tools. All tools are just tools, after all. However, the standard form of frequentist inference, with its null hypothesis significance testing, P-values, and confidence intervals, can be confusing. It’s bad enough that professional researchers struggle with them. We teach undergraduate students in introductory classes.\nOkay, so we are stuck not in the world we want but in the world we’ve got. At my institution and most others, intro stats is a service course that trains far more people who are outside the fields of mathematics and statistics. In that world, students will go on to careers where they interact with research that reports P-values and confidence intervals.\nSo what’s the best we can do for our students, given that limitation? We need to be laser-focused on teaching the frequentist logic of inference the best we can. I want student to see P-values in papers and know how to interpret those P-values correctly. I want students to understand what a confidence interval tells them—and even more importantly, what it does not tell them. I want students to respect the severe limitations inherent in tests of significance. If we’re going to train frequentists, the least we can do is help them become good frequentists.\nOne source of inspiration for good statistical pedagogy comes from the Guidelines for Assessment and Instruction in Statistics Education (GAISE), a set of recommendations made by experienced stats educators and endorsed by the American Statistical Association. Their college guidelines are as follows:\n\nTeach statistical thinking.\n\nTeach statistics as an investigative process of problem-solving and decision-making.\nGive students experience with multivariable thinking.\n\nFocus on conceptual understanding.\nIntegrate real data with a context and purpose.\nFoster active learning.\nUse technology to explore concepts and analyze data.\nUse assessments to improve and evaluate student learning.\n\nIn every element of this book, I’ve tried to follow these guidelines:\n\nThe first part of the book is an extensive guide for exploratory data analysis. The rest of the book is about inference in the context of specific research questions that are answered using statistical tools. While multivariable thinking is a little harder to do in an intro stats class, I take the opportunity whenever possible to use graphs to explore more variables than we can handle with intro stats inferential techniques. I point out the the simple analyses taught in this class are only the first step in more comprehensive analyses that incorporate more information and control for confounders. I emphasize that students can continue their statistical growth by enrolling in more advanced stats classes.\nI often tell students that if they forget everything else from their stats class, the one think I want them to be able to do is interpret a P-value correctly. It’s not intuitive, so it takes an entire semester to set up the idea of a sampling distribution and explain over and over again how the P-value relates to it. In this book, I try to reinforce the logic of inference until the students know it almost instinctively. A huge pedagogical advantage is derived by using randomization and simulation to keep students from getting lost in the clouds of theoretical probability distributions. But they also need to know about the latter too. Every hypothesis test is presented both ways, a task made easy when using the infer package.\nThis is the thing I struggle with the most. Finding good data is hard. Over the years, I’ve found a few data sets I really like, but my goal is to continue to revise the book to incorporate more interesting data, especially data that serves to highlight issues of social justice.\nBack when I wrote the first set of modules that eventually became this book, the goal was to create assignments that merged content with activities so that students would be engaged in active learning. When these chapters are used in the classroom, students can collaborate with each other and with their professor. They learn by doing.\nUnlike most books out there, this book does not try to be agnostic about technology. This book is about doing statistics in R.\nThis one I’ll leave in the capable hands of the professors who use these materials. The chapter assignments should be completed and submitted, and that is one form of assessment. But I also believe in augmenting this material with other forms of assessment that may include supplemental assignments, open-ended data exploration, quizzes and tests, projects, etc.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "Course structure",
    "text": "Course structure\nAs explained above, this book is meant to be a workbook that students complete as they’re reading.\nAt Westminster University, we use Posit Cloud. The cloud solution has a free tier, but in our experience, it’s not quite enough compute hours for this course. Various affordable paid options are available, like having students pay a monthly fee for access, or having the institution pay for the accounts.\nIn the past, we’ve also hosted Posit Workbench on a local server that is connected to our single sign-on (SSO) systems so that students can access RStudio through a browser using their campus online usernames and passwords. If you have the ability to convince your IT folks to support such a server, it’s very helpful. Rather than spending the first day of class troubleshooting while students try to install software on their machines, you can just have them log in and get started right away. Campus admins install packages and tweak settings to make sure all students have a standardized interface and consistent experience.\nIf you don’t have that luxury, or if you don’t want to pay for the cloud accounts, you will need to have students download and install both R and RStudio. The installation processes for both pieces of software are very easy and straightforward for the majority of students. If your students are running R on their own machines or if they’re using Posit Cloud, they will need to use install.packages at the beginning of some of the chapters for any new packages that are introduced. (They are mentioned at the beginning of each chapter with instructions for installing them.)\nChapter 1 is fully online and introduces R and RStudio very gently using only commands at the Console. They will create a project called intro_stats in RStudio that should be used all semester to organize their work. There is a reminder at the beginning of all subsequent chapter to make sure they are in that project before starting to do any work. (Generally, there is no reason they will exit the project, but some students get curious and click on stuff.)\nIn Chapter 2, students are taught to click a link to download a Quarto document (.qmd). I have found that students struggle initially to get this file to the right place. If students are using RStudio online, they will need to use the “Upload” button in the Files tab in RStudio to get the file from their Downloads folder (or wherever they tell their machine to put downloaded files from the internet) into RStudio. If students are using R on their own machines, they will need to move the file from their Downloads folder into their project directory. There are some students who have never had to move files around on their computers, so this is a task that might require some guidance from classmates, TAs, or the professor. The location of the project directory and the downloaded files can vary from one machine to the next. They will have to use something like File Explorer for Windows or the Finder for MacOS, so there isn’t a single set of instructions that will get all students’ files successfully in the right place. Once the file is in the correct location, students can just click on it to open it in RStudio and start reading. Chapter 2 is all about using Quarto documents: markdown syntax, R code chunks, and inline code.\nBy Chapter 3, a rhythm is established that students will start to get used to:\n\nOpen the book online and open RStudio.\nInstall any packages in RStudio that are new to that chapter.\nCheck to make sure they’re are in the intro_stats project.\nClick the link online to download the Quarto document.\nMove the Quarto document from the Downloads folder to the project directory.\nOpen up the Quarto document.\nRestart R and Run All Chunks.\nStart reading and working.\n\nWhen students finish each assignment, they will Restart R and Run All Chunks one last time and then “Render” the Quarto document, which will create HTML output that can then be submitted. (Hopefully, they will also take the opportunity to spell check and proofread thoroughly before submission. It’s important to proofread the HTML document not just for the writing, but also to make sure that the code output and formatting all looks correct.)\nChapters 3 and 4 focus on exploratory data analysis for categorical and numerical data, respectively.\nChapter 5 is a primer on data manipulation using dplyr.\nChapters 6 and 7 cover correlation and regression. This “early regression” approach mirrors the IMS text. (IMS eventually circles back to hypothesis testing for regression, but this book does not. That’s a topic that is covered extensively in most second-semester stats classes.)\nChapters 8–11 are crucial for building the logical foundations for inference. The idea of a sampling distribution under the assumption of a null hypothesis is built up slowly and intuitively through randomization and simulation. By the end of Chapter 11, students will be fully introduced to the structure of a hypothesis test, and hopefully will have experienced the first sparks of intuition about why it “works.” All inference in this book is conducted using a “rubric” approach—basically, the steps are broken down into bite-sized pieces and students are expected to work through each step of the rubric every time they run a test. (The rubric steps are shown in the Appendix.)\nChapter 12 introduces a few more steps to the rubric for confidence intervals. As we are still using randomization to motivate inference, confidence intervals are calculated using the bootstrap approach for now.\nOnce students have developed a conceptual intuition for sampling distributions using simulation, we can introduce probability models. Chapter 13 introduces normal models and Chapter 14 explains why they are often appropriate for modeling sampling distributions.\nThe final chapters of the book (Chapters 15–22) are simply applications of inference in specific data settings: inference for one (Ch. 15) and two (Ch. 16) proportions, Chi-square tests for goodness-of-fit (Ch. 17) and independence (Ch. 18), inference for one mean (Ch. 19), paired data (Ch. 20), two independent means (Ch. 21), and finally ANOVA (Ch. 22). Along the way, students learn about the chi-square, Student t, and F distributions. Although the last part of the book follows a fairly traditional parametric approach, every chapter still includes randomization and simulation to some degree so that students don’t lose track of the intuition behind sampling distributions under the assumption of a null hypothesis.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#onward-and-upward",
    "href": "index.html#onward-and-upward",
    "title": "Introduction to Statistics: an integrated textbook and workbook using R",
    "section": "Onward and upward",
    "text": "Onward and upward\nI hope you enjoy the textbook. You can provide feedback two ways:\n\nThe preferred method is to file an issue on the Github page: https://github.com/VectorPosse/intro_stats/issues\nAlternatively, send me an email: sraleigh@westminsteru.edu",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "01-intro_to_r.html",
    "href": "01-intro_to_r.html",
    "title": "1  Introduction to R",
    "section": "",
    "text": "1.1 Introduction\nWelcome to R! This chapter will walk you through everything you need to know to get started using R.\nAs you go through this chapter (and all future chapters), please read slowly and carefully, and pay attention to detail. Many steps depend on the correct execution of all previous steps, so reading quickly and casually might come back to bite you later.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#what-is-r",
    "href": "01-intro_to_r.html#what-is-r",
    "title": "1  Introduction to R",
    "section": "1.2 What is R?",
    "text": "1.2 What is R?\nR is a programming language specifically designed for doing statistics. Don’t be intimidated by the word “programming” though. The goal of this course is not to make you a computer programmer. To use R to do statistics, you don’t need know anything about programming at all. Every chapter throughout the whole course will give you examples of the commands you need to use. All you have to do is use those example commands as templates and make the necessary changes to adapt them to the data you’re trying to analyze.\nThe greatest thing about R is that it is free and open source. This means that you can download it and use it for free, and also that you can inspect and modify the source code for all R functions. This kind of transparency does not exist in commercial software. The net result is a robust, secure, widely-used language with literally tens of thousands of contributions from R users all over the world.\nR has also become a standard tool for statistical analysis, from academia to industry to government. Although some commercial packages are still widely used, many practitioners are switching to R due to its cost (free!) and relative ease of use. After this course, you will be able to list some R experience on your résumé and your future employer will value this. It might even help get you a job!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#rstudio",
    "href": "01-intro_to_r.html#rstudio",
    "title": "1  Introduction to R",
    "section": "1.3 RStudio",
    "text": "1.3 RStudio\nRStudio is an “Integrated Development Environment,” or IDE for short. An IDE is a tool for working with a programming language that is fancier than just a simple text editor. Most IDEs give you shortcuts, menus, debugging facilities, syntax highlighting, and other things to make your life as easy as possible.\nOpen RStudio so we can explore some of the areas you’ll be using in the future. (How to do this will depend on whether you’ve installed RStudio on your personal computer or logged into a cloud server. If you are in a class, your teacher will explain how to do this. For local installations, you should just be able to open RStudio. For cloud applications, you may need to start a “New Session” or a “New Project”.)\nIt should look something like this:\n\n\n\nScreenshot of RStudio at startup\n\n\nOn the left side of your screen, you should see a big pane called the “Console”. There will be some startup text there, and below that, you should see a “command prompt”: the symbol “&gt;” followed by a blinking cursor. (If the cursor is not blinking, that means that the focus is in another pane. Click anywhere in the Console and the cursor should start blinking again.)\nA command prompt can be one of the more intimidating things about starting to use R. It’s just sitting there waiting for you to do something. Unlike other programs where you run commands from menus, R requires you to know what you need to type to make it work.\nWe’ll return to the Console in a moment.\nNext, look at the upper-right corner of the screen. There are at least three tabs in this pane starting with “Environment”, “History”, and “Connections”. The “Environment” (also called the “Global Environment”) keeps track of things you define while working with R. There’s nothing to see there yet because we haven’t defined anything! The “History” tab will likewise be empty; again, we haven’t done anything yet. We won’t use the “Connections” tab in this course. (Depending on the version of RStudio you are using and its configuration, you may see additional tabs, but we won’t need them for this course.)\nNow look at the lower-right corner of the screen. There are likely six tabs here: “Files”, “Plots”, “Packages”, “Help”, “Viewer”, and “Presentation”. The “Files” tab will eventually contain the files you upload or create. “Plots” will show you the result of commands that produce graphs and charts. “Packages” will be explained later. “Help” is precisely what it sounds like; this will be a very useful place for you to get to know. We will never use the “Viewer” or “Presentation” tabs, so don’t worry about them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#important",
    "href": "01-intro_to_r.html#important",
    "title": "1  Introduction to R",
    "section": "1.4 IMPORTANT!!",
    "text": "1.4 IMPORTANT!!\nThere is a setting you need to change for RStudio to work properly for you as you move through assignments in the future. Find the Tools menu (at the top of the screen, between “Profile” and “Help”) and go to the bottom where it says “Global Options…”\nIn the Workspace section, where it says “Save workspace to .RData on exit”, you must change the drop-down menu from “Ask” to “Never”. The menu is highlighted in the image below:\n\n\n\nChange Ask to Never in this menu.\n\n\nBe sure to scroll down and click the OK button when you’re done.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#try-something",
    "href": "01-intro_to_r.html#try-something",
    "title": "1  Introduction to R",
    "section": "1.5 Try something!",
    "text": "1.5 Try something!\nSo let’s do something in R! Go back to the Console and at the command prompt (the “&gt;” symbol with the blinking cursor), type\n\n1+1\n\nand hit Enter.\nCongratulations! You just ran your first command in R. It’s all downhill from here. R really is nothing more than a glorified calculator.\nOkay, let’s do something slightly more sophisticated. It’s important to note that R is case-sensitive, which means that lowercase letters and uppercase letters are treated differently. Type the following, making sure you use a lowercase x and lowercase c, and hit Enter:\n\nx &lt;- c(1, 3, 4, 7, 9)\n\nYou have just created a “vector”. When we use the letter c and enclose a list of things in parentheses, we tell R to “combine” those elements. So, a vector is just a collection of data. The little arrow &lt;- says to take what’s on the right and assign it to the symbol on the left. The vector x is now saved in memory. As long as you don’t terminate your current R session, this vector is available to you.\nCheck out the “Environment” pane now. You should see the vector x that you just created, along with some information about it. Next to x, it says num, which means your vector has numerical data. Then it says [1:5] which indicates that there are five elements in the vector x.\nAt the command prompt in the Console, type\n\nx\n\nand hit Enter. Yup, x is there. R knows what it is. You may be wondering about the [1] that appears at the beginning of the line. To see what that means, try typing this (and hit Enter—at some point here I’m going to stop reminding you to hit Enter after everything you type):\n\ny &lt;- letters\n\nR is clever, so the alphabet is built in under the name letters.\nType\n\ny\n\nNow can you see what the [1] meant above? Assuming the letters spilled onto more than one line of the Console, you should see a number in brackets at the beginning of each line telling you the numerical position of the first entry in each new line.\nSince we’ve done a few things, check out the “Global Environment” in the upper-right corner. You should see the two objects we’ve defined thus far, x and y. Now click on the “History” tab. Here you have all the commands you have run so far. This can be handy if you need to go back and re-run an earlier command, or if you want to modify an earlier command and it’s easier to edit it slightly than type it all over again. To get an older command back into the Console, either double-click on it, or select it and click the “To Console” button at the top of the pane.\nWhen we want to re-use an old command, it has usually not been that long since we last used it. In this case, there is an even more handy trick. Click in the Console so that the cursor is blinking at the blank command prompt. Now hit the up arrow on your keyboard. Do it again. Now hit the down arrow once or twice. This is a great way to access the most recently used commands from your command history.\nLet’s do something with x. Type\n\nsum(x)\n\nI bet you figured out what just happened.\nNow try\n\nmean(x)\n\nWhat if we wanted to save the mean of those five numbers for use later? We can assign the result to another variable! Type the following and click on the Environment tab to observe the effect.\n\nm &lt;- mean(x)\n\nIt makes no difference what letter or combination of letters we use to name our variables. For example,\n\nmean_x &lt;- mean(x)\n\njust saves the mean to a differently named variable. In general, variable names can be any combination of characters that are letters, numbers, underscore symbols (_), and dots (.). (In this course, we will prefer underscores over dots.) You cannot use spaces or any other special characters in the names of variables.1 You should avoid variable names that are the same words as predefined R functions; for example, we should not type mean &lt;- mean(x).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#load-packages",
    "href": "01-intro_to_r.html#load-packages",
    "title": "1  Introduction to R",
    "section": "1.6 Load packages",
    "text": "1.6 Load packages\nPackages are collections of commands, functions, and sometimes data that people all over the world write and maintain. These packages extend the capabilities of R and add useful tools. For example, we would like to use the palmerpenguins package because it includes an interesting data set on penguins.\nType the following at the command prompt in the Console:2\n\ninstall.packages(\"palmerpenguins\")\n\nWe are doing this because you’ve never used the palmerpenguins package before. Once a package is installed, though, it never has to be installed again.\nAfter we’ve installed the package (the one-time process we completed above), we will need to load the package in every R session in which we want to use it. For example, the palmerpenguins package contains a data set called penguins. Let’s see what happens when we try to access this data set without loading the package that contains it. Typing this will produce an error:\n\npenguins\n\nThat error makes sense because R doesn’t know anything about a data set called penguins.\nBut since the palmerpenguins package has been installed, you can now type this at the command prompt:\n\nlibrary(palmerpenguins)\n\nIt didn’t look like anything happened. However, in the background, all the stuff in the palmerpenguins package became available to use.\nLet’s test that claim. Hit the up arrow twice and get back to where you see this at the Console (or you can manually re-type it, but that’s no fun!):\n\npenguins\n\nNow R knows about the penguins data, so the last command printed some of it to the Console.\nGo look at the “Packages” tab in the pane in the lower-right corner of the screen. Scroll down a little until you get to the “P”s. You should be able to find the palmerpenguins package. You’ll also notice a check mark by it, indicating that this package is loaded into your current R session.\nYou must use the library command in every new R session in which you want to use a package. If you terminate your R session, R forgets about the package. If you are ever in a situation where you are trying to use a command and you know you’re typing it correctly, but you’re still getting an error, check to see if the package containing that command has been loaded with library. (Many R commands are “base R” commands, meaning they come with R and no special package is required to access them. The set of letters you used above is one such example.)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#getting-help",
    "href": "01-intro_to_r.html#getting-help",
    "title": "1  Introduction to R",
    "section": "1.7 Getting help",
    "text": "1.7 Getting help\nThere are three important ways to get help with R. The first is the obvious “Help” tab in the lower-right pane on your screen. Click on that tab now. In the search bar at the right, type penguins and hit Enter. Take a few minutes to read the help file.\nHelp files are only as good as their authors. Fortunately, most package developers are conscientious enough to write decent help files. But don’t be surprised if the help file doesn’t quite tell you what you want to know. And for highly technical R functions, sometimes the help files are downright inscrutable. Try looking at the help file for the grep function. Can you honestly say you have any idea what this command does or how you might use it? Over time, as you become more knowledgeable about how R works, these help files get less mysterious.\nThe second way of getting help is from the Console. Go to the Console and type\n\n?letters\n\nThe question mark tells R you need help with the R command letters. This will bring up the help file in the same Help pane you were looking at before.\nSometimes, you don’t know exactly what the name of the command is. For example, suppose we misremembered the name and thought it was letter instead of letters. Try typing this:\n\n?letter\n\nYou should have received an error because there is no command called letter. Try this instead:\n\n??letter\n\nand scroll down a bit in the Help pane. Two question marks tell R not to be too picky about the spelling. This will bring up a whole bunch of possibilities in the Help pane, representing R’s best guess as to what you might be searching for. (In this case, it’s not easy to find. You’d have to know that the help file for letters appeared on a help page called base::Constants.)\nThe third way to get help—and often the most useful way—is to use your best friend, the internet. You don’t want to just type “R” into a search engine. (That’s the downside of using a single letter of the alphabet for the name of a programming language.) However, if you type “R __________” where you fill in the blank with the topic of interest, search engines usually do a pretty good job sending you to relevant pages. Within the first few hits, in fact, you’ll often see an online copy of the same help file you see in R. Frequently, the next few hits lead to StackOverflow where very knowledgeable people post very helpful responses to common questions.\nUse a search engine to find out how to take the square root of a number in R. Test out your newly-discovered function on a few numbers in the Console to make sure it works.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#understanding-the-data",
    "href": "01-intro_to_r.html#understanding-the-data",
    "title": "1  Introduction to R",
    "section": "1.8 Understanding the data",
    "text": "1.8 Understanding the data\n\n\n\nAdélie Penguin, By Andrew Shiva / Wikipedia, CC BY-SA 4.0, Link\n\n\nLet’s go back to the penguins data contained in the penguins data set from the palmerpenguins package.\nThe first thing we do to understand a data set is to read the help file on it. (We’ve already done this for the penguins data.) Of course, this only works for data files that come with R or with a package that can be loaded into R. If you are using R to analyze your own data, presumably you don’t need a help file. And if you’re analyzing data from another source, you’ll have to go to that source to find out about the data.\nWhen you read the help file for penguins, you may have noticed that it described the “Format” as being “A tibble with 344 rows and 8 variables.” What is a “tibble”?\nThe word “tibble” is an R-specific term that describes data organized in a specific way. A more common term is “data frame” (or sometimes “data table”). The idea is that in a data frame, the rows and the columns have very specific interpretations.\nEach row of a data frame represents a single object or observation. So in the penguins data, each row represents a penguin. If you have survey data, each row will usually represent a single person. But an “object” can be anything about which we collect data. State-level data might have 50 rows and each row represents an entire state.\nEach column of a data frame represents a variable, which is a property, attribute, or measurement made about the objects in the data. For example, the help file mentions that various pieces of information are recorded about each penguin, like species, bill length, flipper length, body mass, sex, and so on. These are examples of variables. In a survey, for example, the variables will likely be the responses to individual questions.\nWe will use the terms tibble and data frame interchangeably in this course. They are not quite synonyms: tibbles are R-specific implementations of data frames, the latter being a more general term that applies in all statistical contexts. Nevertheless, there are no situations (at least not encountered in this course) where it makes any difference if a data set is called a tibble or a data frame.\nWe can also look at the data frame in “spreadsheet” form. Type\n\nView(penguins)\n\n(Be sure you’re using an upper-case “V” in View.) A new pane should open up in the upper-left corner of the screen. In that pane, the penguins data appears in a grid format, like a spreadsheet. The observations (individual penguins) are the rows and the variables (attributes and measurements about the penguins) are the columns. This will also let you sort each column by clicking on the arrows next to the variable name across the top.\nSometimes, we just need a little peek at the data. Try this to print just a few rows of data to the Console:\n\nhead(penguins)\n\nWe can customize this by specifying the number of rows to print. (Don’t forget about the up arrow trick!)\n\nhead(penguins, n = 10)\n\nThe tail command does something similar, but for data from the last few rows.\n\ntail(penguins)\n\nWhen we’re working with HTML documents like this one, it’s usually not necessary to use View, head, or tail because the HTML format will print the data frame a lot more neatly than it did in the Console. You do not need to type the following code; just look below it for the table that appears.\n\npenguins\n\nYou can scroll through the rows by using the numbers at the bottom or the “Next” button. You can scroll through the variables by clicking the little black arrow pointed to the right in the upper-right corner. The only thing you can’t do here that you can do with View is sort the columns.\nWe want to understand the “structure” of our data. For this, we use the str command. Try it:\n\nstr(penguins)\n\nThis tells us several important things. First it says that we are looking at a data frame with 344 observations of 8 variables. We can isolate those pieces of information separately as well, if needed:\n\nNROW(penguins)\n\n\nNCOL(penguins)\n\nThese give you the number of rows and columns, respectively.\nThe str command also tells us about each of the variables in our data set. We’ll talk about these later.\nWe need to be able to summarize variables in the data set. The summary command is one way to do it:\n\nsummary(penguins)\n\nYou may not recognize terms like “Median” or “1st Qu.” or “3rd Qu.” yet. Nevertheless, you can see why this summary could come in handy.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#understanding-the-variables",
    "href": "01-intro_to_r.html#understanding-the-variables",
    "title": "1  Introduction to R",
    "section": "1.9 Understanding the variables",
    "text": "1.9 Understanding the variables\nWhen we want to look at only one variable at a time, we use the dollar sign to grab it. Try this:\n\npenguins$body_mass_g\n\nThis will list the entire body_mass_g column, in other words, the body masses (in grams) of all the penguins in this particular study. If we only want to see the first few, we can use head like before.\n\nhead(penguins$body_mass_g)\n\nIf we want the structure of the variable body_mass_g, we do this:\n\nstr(penguins$body_mass_g)\n\nNotice the letters int at the beginning of the line. That stands for “integer” which is another word for whole number. In other words, the penguins’ body masses all appear in this data set as whole numbers. There are other data types you’ll see in the future:\n\nnum: This is for general numerical data (which can be integers as well as having decimal parts).\nchr: This means “character”, used for character strings, which can be any sequence of letters or numbers. For example, if the researcher recorded some notes for each penguin, these notes would be recorded in a character variable.\nfactor: This is for categorical data, which is data that groups observations together into categories. For example, species is categorical. These are generally recorded like character strings, but factor variables have more structure because they take on a limited number of possible values corresponding to a generally small number of categories. We’ll learn a lot more about factor variables in future chapters.\n\nThere are other data types, but the ones above are by far the most common that you’ll encounter on a regular basis.\nIf we want to summarize only the variable body_mass_g, we can do this:\n\nsummary(penguins$body_mass_g)\n\nWhile executing the commands above, you may have noticed entries listed as NA. These are “missing” values. It is worth paying attention to missing values and thinking carefully about why they might be missing. For now, just make a mental note that NA is the code R uses for data that is missing. (This would be the same as a blank cell in a spreadsheet.)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#projects",
    "href": "01-intro_to_r.html#projects",
    "title": "1  Introduction to R",
    "section": "1.10 Projects",
    "text": "1.10 Projects\nUsing files in R requires you to be organized. R uses what’s called a “working directory” to find the files it needs. Therefore, you can’t just put files any old place and expect R to be able to find them.\nOne way of ensuring that files are all located where R can find them is to organize your work into projects.\n\nIf you are using Posit Cloud, you have already created a project. It will say “Untitled project” at the top of the screen.\n\nClick on the words “Untitled project” and type “intro_stats”. You may skip the next set of bullet points.\n\nIf you are using a local installation of RStudio, look in the far upper-right corner of the RStudio screen. You should see some text that says Project: (None). This means we are not currently in a project and we need to to create one.\n\nOpen the drop-down menu here and select New Project. When the dialog box opens, select New Directory, then New Project. You’ll need to give your project a name. In this case, type intro_stats for the “Directory name”. Leave everything else alone and click Create Project. You will see the screen refresh and R will restart. If everything worked the way it should, creating a new project will create a new folder, put you in that folder, and automatically make it your working directory.\n\n\nIn general, project names should be descriptive—they should still remind you in several years what the project was about. The only thing to remember is that project names and file names should not have any spaces in them. In fact, you should avoid other kinds of special characters as well, like commas, number signs, etc. Stick to letters and numerals and you should be just fine. If you want a multi-word project name or file name, I recommend using underscores. R will allow you to name projects with spaces and modern operating systems are set up to handle file names with spaces, but there are certain things that either don’t work at all or require awkward workarounds when file names have spaces.\nYou will see a file in the Files pane with file extension .Rproj, but you should never touch that file. It’s just for RStudio to keep track of your project details.\nAny additional files you need for your project should be placed in this directory. In all future chapters, the first thing you will do is download the chapter file from the book website and place it here in your project folder. If you are using RStudio through a web browser, you’ll need to upload files to your project folder using the “Upload” button in the Files tab. If you have installed R and RStudio on your own machine, you’ll need to navigate your system to find the downloaded file and move or copy it to your project working directory. (It’s likely in a folder called “Downloads”. But if it’s not and you need to find it elsewhere, this is done most easily using File Explorer in Windows and the Finder in MacOS.)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#conclusion",
    "href": "01-intro_to_r.html#conclusion",
    "title": "1  Introduction to R",
    "section": "1.11 Conclusion",
    "text": "1.11 Conclusion\nIt is often said that there is a steep learning curve when learning R. This is true to some extent. R is harder to use at first than other types of software. Nevertheless, in this course, we will work hard to ease you over that first hurdle and get you moving relatively quickly. Don’t get frustrated and don’t give up! Learning R is worth the effort you put in. Eventually, you’ll grow to appreciate the power and flexibility of R for accomplishing a huge variety of statistical tasks.\nOnward and upward!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "01-intro_to_r.html#footnotes",
    "href": "01-intro_to_r.html#footnotes",
    "title": "1  Introduction to R",
    "section": "",
    "text": "The official spec says that a valid variable name “consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number.”↩︎\nIf you get an authorization error, that means you are accessing RStudio through a managed local server and you’ll need your admin to install the package for you.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html",
    "href": "02-using_quarto-web.html",
    "title": "2  Using Quarto",
    "section": "",
    "text": "2.1 Introduction\nThis chapter will teach you how to use Quarto to create quality documents that incorporate text and R code seamlessly.\nFirst, though, let’s make sure you are set up in your project in RStudio.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#introduction",
    "href": "02-using_quarto-web.html#introduction",
    "title": "2  Using Quarto",
    "section": "",
    "text": "2.1.1 Are you in your project?\nIf you followed the directions at the end of the last chapter, you should have created/named a project called intro_stats. Let’s make sure you’re in that project.\nLook at either the top (Posit Cloud) or the upper right corner of the RStudio screen. Does it say intro_stats? If so, congratulations! You are in your project.\nIf you’re not in the intro_stats project,\n\nin Posit Cloud, click on “Your Workspace” and click on the “intro_stats” project you created in the last chapter.\nfor local installations, click on whatever it does say in the upper right corner (probably Project: (None)). You can click “Open Project” but it’s likely that the intro_stats project appears in the drop-down menu in your list of recently accessed projects. So click on the project intro_stats.\n\n\n\n2.1.2 Install new packages\nType the following commands at the Console:1\n\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"tidyverse\")\n\nIt may take a few minutes to install these packages, especially tidyverse, so be patient.\n\n\n2.1.3 Download the Quarto file\nYou need to download this chapter as an Quarto (.qmd) file. Please click the following link to do so:\nhttps://vectorposse.github.io/intro_stats/chapter_downloads/02-using_quarto.qmd\nThe file is now likely sitting in a Downloads folder on your machine (or wherever you have set up for web files to download).\n\nIf you are logged into RStudio on a web browser, go to the Files tab and click the “Upload” button. From there, leave the first box alone (“Target directory”). Click the “Choose File” button and navigate to the folder on your machine containing the file 02_using-quarto.qmd. Select that file and click “OK” to upload the file. Then you will be able to open the file in RStudio simply by clicking on it in the Files pane.\nIf you using RStudio on your own machine, you will need to move the file from your Downloads folder into the intro_stats project directory you created at the end of the last chapter. (Again, if you haven’t created the intro_stats project, please go back to Chapter 1 and follow the directions for doing that.) Moving files around is most easily done using File Explorer in Windows or the Finder in MacOS.\n\nAt this point, you should be reading this text while looking at it in the left pane of RStudio, after opening up the Quarto (.qmd) file and scrolling down until you reach this spot. If you are reading this text while still browsing the book online, be aware that there are several instructions below that won’t make any sense because you’re not looking at the plain text file with all the code in it. Much of the material in this book can be read and enjoyed online, but the real learning comes from downloading the chapter files (starting with Chapter 2—this one) and working through them in RStudio.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#what-is-quarto",
    "href": "02-using_quarto-web.html#what-is-quarto",
    "title": "2  Using Quarto",
    "section": "2.2 What is Quarto?",
    "text": "2.2 What is Quarto?\nBefore we can talk about Quarto documents, we need to talk about markdown.\nMarkdown is a way of using plain text with simple characters to indicate formatting choices in a document. For example, in a markdown file, one can make headers by using number signs (or hashtags as the kids are calling them these days2). The Quarto file itself is just a plain text file. To see the formatting, the file has to be converted to HTML, which is the format used for web pages. (This process is described below.)\nQuarto documents are just text files that use markdown. They also allow you to include R code alongside the text. Here’s an example of a “code chunk”:\n\n1 + 1\n\n[1] 2\n\n\nClick the little dark green, right-facing arrow in the upper-right corner of the code chunk. (The icon I’m referring to is next to a lighter green icon with a downward-facing arrow.) When you “run” the code chunk like this, R produces the appropriate output. We’ll say more about code chunks later in this document.\nThis document—with text and code chunks together—is called an Quarto document.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#rendering-a-document",
    "href": "02-using_quarto-web.html#rendering-a-document",
    "title": "2  Using Quarto",
    "section": "2.3 Rendering a document",
    "text": "2.3 Rendering a document\nThere is a button in the toolbar right above the text that says “Render”. It’s next to a big, blue arrow. Go ahead and click it. See what happens.\nOnce the pretty output is generated, take a few moments to look back and forth between it and the original Quarto document (the plain text in RStudio). You can see some tricks that we won’t need much (embedding web links, making lists, etc.) and some tricks that we will use in every chapter (like R code chunks).\nAt first, you’ll want to work back and forth between the Quarto document and the HTML file to get used to how the formatting in the plain text file get translated to output in the HTML file. You can hit the Render button any time you want to update the HTML output with your most recent changes. After a while, you will look at the HTML file less often and work mostly in the Quarto file, only rendering the final HTML output occasionally, most importantly when you are finished and ready to produce your final draft.\nOne additional benefit of rendering often is that it also automatically saves your progress. If you choose to render less often, you’ll want to save your document manually from time to time just so you don’t lose any work in case of a computer malfunction. (The easiest way to save things in pretty much every piece of software anywhere is to use the keyboard shortcut Ctrl-S in Windows or Cmd-S in MacOS.)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#literate-programming",
    "href": "02-using_quarto-web.html#literate-programming",
    "title": "2  Using Quarto",
    "section": "2.4 Literate programming",
    "text": "2.4 Literate programming\nQuarto is one way to implement a “literate programming” paradigm. The concept of literate programming was famously described by Donald Knuth, an eminent computer scientist. The idea is that computer programs should not appear in sterile files that are full of hard-to-read, abstruse lines of computer code. Instead, functional computer code should appear interspersed with writing that explains the code.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#reproducible-research",
    "href": "02-using_quarto-web.html#reproducible-research",
    "title": "2  Using Quarto",
    "section": "2.5 Reproducible research",
    "text": "2.5 Reproducible research\nOne huge benefit of organizing your work into Quarto documents is that it makes your work reproducible. This means that anyone with access to your data and your Quarto document should be able to re-create the exact same analysis you did.\nThis is a far cry from what generally happens in research. For example, if a person does all their work in Microsoft Excel, they make a series of choices in how they format and analyze their data, and all those choices take the form of menu commands that they point and click with a mouse. There is no record of the exact sequence of clicks that took them from point A to B all the way to Z. All they have to show for their work is the “clean” spreadsheet and anything they’ve written down or communicated about their results. If there were any errors along the way, they would be very hard to track down.3\nReproducibility should be a minimum prerequisite for all statistical analysis. Sadly, that is not the case in most of the research world. We are training you to be better.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#structure-of-a-quarto-document",
    "href": "02-using_quarto-web.html#structure-of-a-quarto-document",
    "title": "2  Using Quarto",
    "section": "2.6 Structure of a Quarto document",
    "text": "2.6 Structure of a Quarto document\nLet’s start from the top. Look at the very beginning of the plain Quarto document. (If you’re in RStudio, you are looking at the Quarto document. If you are looking at the pretty HTML file, you’ll need to go back to RStudio.) The section at the very top of the file that starts and ends with three hyphens is called the YAML header. (Search for YAML on the internet it if you really care why.) The title of the document appears already, but you’ll need to substitute your name and date in the obvious place. Scroll up and do that now. Come back here when you’re done.\nYou’ve made changes to the document, so you’ll need to push the “Render” button again. Once that’s done, look at the resulting HTML document. The YAML header has been converted into a nicely formatted document header with the new information you’ve provided.\nNext, you’ll see three colons followed by the text {.callout-note}. Then there is some text that lists R functions that will be introduced in the chapter. (There aren’t any in this chapter, but there usually will be in future chapters.) Then there are three more colons. It’s very important that you do not modify the three colons or any of the text that appears on the same line in the the curly braces next to the colons! This will mess up your ability to Render the document.\nAnother place you will see the three-colon “tags” will be when providing answers to homework questions. It will start with three colons next to {.answer} and end with three colons. While you should be careful not to modify those tags, you can and should modify the plain text that lies between the colon tag fences. Let’s try it:\n\nReplace this text here with something else. (Anything you want to type here is fine.) Then render the document and see how it appears in the HTML file.\n\nTo be clear, the colorful answer boxes are not part of the standard Quarto tool set. The custom code to create those answer boxes is imported from the book’s website.\nWe also have section headers throughout, which in the Quarto file look like:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#section-header",
    "href": "02-using_quarto-web.html#section-header",
    "title": "2  Using Quarto",
    "section": "2.7 Section header",
    "text": "2.7 Section header\nThe hashtags are markdown code for formatting headers. Additional hashtags will create subsections:\n\n2.7.1 Not quite as big\nWe could actually use a single number sign, but # makes a header as big as the title, which is too big and is reserved for the main title of the whole document. Therefore, we will use ## for section headers and ### for subsections.\nYou do need to make sure that there is a blank line before and after each section header. To see why, look at the HTML document at this spot: ## Is this a new section? Do you see the problem?\nPut a blank line before and after the line above that says “Is this a new section?” Render one more time and make sure that the line now shows up as a proper section header.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#other-formatting-tricks",
    "href": "02-using_quarto-web.html#other-formatting-tricks",
    "title": "2  Using Quarto",
    "section": "2.8 Other formatting tricks",
    "text": "2.8 Other formatting tricks\nYou can make text italic or bold by using asterisks. (Don’t forget to look at the HTML to see the result.)\nYou can make bullet-point lists. These can be made with asterisks, but you’ll need to start after a blank line, then put asterisks at the beginning of each new line, followed by a space, as follows:\n\nFirst item\nSecond item\n\nIf you want sub-items, indent at least two spaces and use another asterisk followed by a space.\n\nItem\n\nSub-item\nSub-item\n\nItem\nItem\n\nOr you can make ordered lists. Just use numbers and Quarto will do all the work for you. (Again, make sure you’re starting after a blank line and that there is a space after the periods.)\n\nFirst Item\nSecond Item\nThird Item\n\nWe can make horizontal rules. There are lots of ways of doing this, but we prefer a bunch of asterisks in a row (at least three—we’ve used five for more visual impact in the Quarto document):\n\nThere are many more formatting tricks available. For a good resource on all Quarto stuff, click on this link. And notice in the previous sentence the syntax for including hyperlinks in your document.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#r-code-chunks",
    "href": "02-using_quarto-web.html#r-code-chunks",
    "title": "2  Using Quarto",
    "section": "2.9 R code chunks",
    "text": "2.9 R code chunks\nThe most powerful feature of Quarto is the ability to do data analysis right inside the document. This is accomplished by including R code chunks. An R code chunk doesn’t just show you the R code in your output file; it also runs that code and generates output that appears right below the code chunk.\nAn R code chunk starts with three “backticks” followed by the letter r enclosed in braces, and it ends with three more backticks. (The backtick is usually in the upper-left corner of your keyboard, next to the number 1 and sharing a key with the tilde ~.)\nIn RStudio, click the little dark green, right-facing arrow in the upper-right corner of the code chunk below, just as you did earlier.\n\n# Here's some sample R code\ntest &lt;- c(1, 2, 3, 4)\nsum(test)\n\n[1] 10\n\n\nAfter pushing the dark green arrow, you should notice that the output of the R code appeared like magic. If you Render the HTML output, you should see the same output appear. If you hover your mouse over the dark green arrow, you should see the words “Run Current Chunk”. We’ll call this the Run button for short.\nWe need to address something here that always confuses people new to R and Quarto. A number sign (aka “hashtag”) in a Quarto document gives us section headers. In R code, however, a number sign indicates a “comment” line. In the R code above, the line # Here's some sample R code is not executed as R code. But you can clearly see that the two lines following were executed as R code. So be careful! Number signs inside and outside R code chunks behave very differently.\nTypically, the first code chunk that appears in our document will load any packages we need. We will be using a package called tidyverse (which is really a collection of lots of different packages) throughout the course. We load it now. Click on the Run button (the dark green, right-facing arrow) in the code chunk below. (If you get an error that says “there is no package called tidyverse” that means you failed to install it earlier. Go back and use install.packages as instructed at the top of this document.)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe output here consists of a bunch of information generated when trying to load the package. These are not errors, even though one section is labeled “Conflicts”. Usually, errors appear with the word “Error”, so it’s typically clear when something just didn’t work. Also note that once you’ve loaded a package, you don’t need to load it again until you restart your R session. For example, if you go back and try to run the code chunk above one more time, the output will disappear. That’s because tidyverse is already loaded, so the second “run” doesn’t actually generate output anymore.\nOkay, let’s do something interesting now. We’ll revisit the penguins data set we introduced in the previous chapter. Remember, though, that this data set also lives in a package that needs to be loaded. Run the code chunk below to load the palmerpenguins package. (There may not be any output. But the command worked silently in the background to load the palmerpenguins package.)\n\nlibrary(palmerpenguins)\n\nLet’s see what happens when we try to run multiple commands in one code chunk:\n\nhead(penguins)\n\n\n  \n\n\ntail(penguins)\n\n\n  \n\n\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\nIf you’re looking at this in RStudio, it’s a bit of a mess. RStudio did its best to give you what you asked for, but there are three separate commands here. The first two (head and tail) print some of the data, so the first two boxes of output are tables showing you the head and the tail of the data. The next one (str) normally just prints some information to the Console. So RStudio gave you an R Console box with the output of this command.\nIf you look at the HTML file, you can see the situation isn’t as bad. Each command and its corresponding output appear nicely separated there.\nNevertheless, it will be good practice and a good habit to get into to put multiple output-generating commands in their own R code chunks. Run the following code chunks and compare the output to the mess you saw above:\n\nhead(penguins)\n\n\n  \n\n\n\n\ntail(penguins)\n\n\n  \n\n\n\n\nstr(penguins)\n\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n\n\nThis won’t look any different in the HTML file, but it sure looks a lot cleaner in RStudio.\nWhat about the two lines of the first code chunk we ran above?\n\ntest &lt;- c(1, 2, 3, 4)\nsum(test)\n\n[1] 10\n\n\nShould these two lines be separated into two code chunks? If you run it, you’ll see only one piece of output. That’s because the line test &lt;- c(1, 2, 3, 4) works invisibly in the background. The vector test gets assigned, but no output is produced. Try it and see (push the Run button):\n\ntest &lt;- c(1, 2, 3, 4)\n\nSo while there’s no harm in separating these lines and putting them in their own chunks, it’s not strictly necessary. You really only need to separate lines when they produce output. (And even then, if you forget, RStudio will kindly give you multiple boxes of output.)\nSuppose we define a new variable called test2 in a code chunk. FOR PURPOSES OF THIS EXERCISE, DO NOT HIT THE RUN BUTTON YET! But do go look at the HTML file.\n\ntest2 &lt;- c(\"a\", \"b\", \"c\")\ntest2\n\n[1] \"a\" \"b\" \"c\"\n\n\nThe first line defines test2 invisibly. The second line asks R to print the value of test2, and the HTML document shows the vector of three letters printed in the output below the code chunk. DON’T HIT THE RUN BUTTON YET!\nOkay, now go to the Console in RStudio (in the lower left corner of the screen). Try typing test2. You should get an “Error: object ‘test2’ not found.”\nWhy does this happen? The Global Environment doesn’t know about it yet. Look in the upper right corner of the screen, under the “Environment” tab. You should see test, but not test2.\nOkay, NOW GO BACK AND CLICK THE RUN BUTTON IN THE LAST CHUNK ABOVE. The output appears in RStudio below the code chunk and the Global Environment has been updated.\nThe take home message is this:\nBe sure to run all your code chunks in RStudio!\nIn RStudio, look in the toolbar above this document, toward the right. You should see the word “Run” with a little drop-down menu next to it. Click on that drop-down menu and select “Run All”. Do you see what happened? All the code chunks ran again, and that means that anything in the Global Environment will now be updated to reflect the definitions made in the Quarto document.\nIt’s a good idea to “Run All” when you first open a new Quarto document. This will ensure that all your code chunks have their output below them (meaning you don’t have to go through and click the Run button manually for each chunk, one at a time) and the Global Environment will accurately reflect the variables you are using.\nYou can “Run All” from time to time, but it’s easier just to “Run All” once at the beginning, and then Run individual R code chunks manually as you create them.\nNow go back to the Environment tab and find the icon with the little broom on it. Click it. You will get a popup warning you that you about to “remove all objects from the environment”. Click “Yes”. Now the Global Environment is empty. Go back to the “Run” menu and select “Run All”. All the objects you defined in the Quarto document are back.\nClearing out your environment can be useful from time to time. Maybe you’ve been working on a chapter for a while and you’ve tried a bunch of stuff that didn’t work, or you went back and changed a bunch of code. Eventually, all that junk accumulates in your Global Environment and it can mess up your Quarto document. For example, let’s define a variable called my_variable.\n\nmy_variable &lt;- 42\n\nThen, let’s do some calculation with my_variable.\n\nmy_variable * 2\n\n[1] 84\n\n\nPerhaps later you decide you don’t really need my_variable. Put a hashtag in front of the code my_variable &lt;- 42 to comment it out so that it will no longer run, but don’t touch the next code chunk where you multiply it by 2. Now try running the code chunk with my_variable * 2 again. Note that my_variable is still sitting in your Global Environment, so you don’t get any error messages. R can still see and access my_variable.\nNow go to the “Run” menu and select “Restart R and Run All Chunks”. This clears the Global Environment and runs all the R code starting from the top of the Quarto document. This time you will get an error message: object 'my_variable' not found. You’ve tried to calculate with a variable called my_variable that doesn’t exist anymore. (The line in which it was defined has been commented out.)\nIt’s best to make sure all your code chunks will run when loaded from a clean R session. The “Restart R and Run All Chunks” option is an easy way to both clear your environment and re-run all code chunks. You can do this as often as you want, but you will definitely want to do this one last time when you are done. At the end of the chapter, when you are ready to prepare the final draft, please select “Restart R and Run All Chunks”. Make sure everything still works!\nTo get rid of the error above, uncomment the line my_variable &lt;- 42 by removing the hashtag you added earlier.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#inline-r-commands",
    "href": "02-using_quarto-web.html#inline-r-commands",
    "title": "2  Using Quarto",
    "section": "2.10 Inline R commands",
    "text": "2.10 Inline R commands\nYou don’t need a standalone R code chunk to do computations. One neat feature is the ability to use R to calculate things right in the middle of your text.\nHere’s an example. Suppose we wanted to compute the mean body mass (in grams) for the penguins in the penguins data set. We could do this:\n\nmean(penguins$body_mass_g, na.rm = TRUE)\n\n[1] 4201.754\n\n\n(The na.rm = TRUE part is necessary because two of the penguins are missing body mass data. More on missing data in future chapters.)\nBut we can also do this inline by using backticks and putting the letter r inside the first backtick. Go to the HTML document to see how the following sentence appears:\nThe mean body mass for penguins in the penguins data set is 4201.754386 grams.\nYou can (and should) check to make sure your inline R code is working by checking the HTML output, but you don’t necessarily need to go to the HTML file to find out. In RStudio, click so that the cursor is somewhere in the middle of the inline code chunk in the paragraph above. (In other words, click on some part of the text in between the backticks.) Now hit Ctrl-Enter or Cmd-Enter (PC or Mac respectively). A little box should pop up that shows you the answer!\nNotice that, in addition to the inline R command that calculated the mean, we also enclosed penguins in backticks to make it stand out in the output. We’ll continue to do that for all computer commands and R functions. But to be clear, putting a word in backticks is just a formatting trick. If you want inline R code, you also need the letter r followed by a space inside the backticks.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#inline-r-command-errors",
    "href": "02-using_quarto-web.html#inline-r-command-errors",
    "title": "2  Using Quarto",
    "section": "2.11 Inline R command errors",
    "text": "2.11 Inline R command errors\nWorking with inline code is trickier than working with code chunks. When a code chunk fails, the error message appears right there below the chunk. When inline code fails, it manifests in more subtle ways.\nObserve the simple inline code below:\n5\nThis code works just fine. (Test this yourself by clicking somewhere between the backticks and hitting Ctrl-Enter or Cmd-Enter.)\nHit the Render button and scroll down in the HTML document to see what appears here.\nNow go up and change the inline code by adding a percent sign (%) after the 3 (so it will look like 2+3%).\nClick somewhere between the backticks and hit Ctrl-Enter or Cmd-Enter. You should get an error.\nNext, go to the Run menu and select “Restart R and Run All Chunks.” You get no errors. This makes sense because all the code chunks are working fine. The broken code is inline, not inside a code chunk.\nNow try to hit the Render button. The “Background Jobs” tab will stay open with a bunch of error text. Scroll up a little in that error text until you see\nFailed to parse the inline R code\nThat’s the only hint we have as to where the problem might live. We happen to know where to find the offending code, but imagine this code were buried in the middle of some long document.\nThe easiest solution is to use Ctrl-F or Cmd-F. This will open the “Find” tool. Start typing “2+3%” and it will take you to the problematic spot.\nFix the error by deleting the percent sign. Now hit the Render button again to make sure the problem really got fixed and that the output now appears correctly in the HTML document.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#copying-and-pasting",
    "href": "02-using_quarto-web.html#copying-and-pasting",
    "title": "2  Using Quarto",
    "section": "2.12 Copying and pasting",
    "text": "2.12 Copying and pasting\nIn future chapters, you will be shown how to run statistical analyses using R. Each chapter will give extensive explanations of the statistical concepts and demonstrations of the necessary R code. Afterwards, there will be one or more exercises that ask you to apply your new-found knowledge to run similar analyses on your own with different data.\nThe idea is that you should be able to copy and paste the R code from the previously worked examples. But you must be thoughtful about how you do this. The code cannot just be copied and pasted blindly. It must be modified so that it applies to the exercises with new data. This requires that you understand what the code is doing. You cannot effectively modify the code if you don’t know which parts to modify.\nThere will also be exercises in which you are asked to provide your own explanations and interpretations of your analyses. These should not be copied and pasted from any previous work. These exercises are designed to help you understand the statistical concepts, so they must be in your own words, using your own understanding.\nIn order to be successful in these chapters, you must do the following:\n\nRead every part of the chapter carefully!\n\n\nIt will be tempting to skim over the paragraphs quickly and just jump from code chunk to code chunk. This will be highly detrimental to your ability to gain the necessary understanding—not just to complete the chapter, but to succeed in statistics overall.\n\n\nCopy and paste thoughtfully!\n\n\nNot every piece of code from the early part of the chapter will necessarily apply to the later exercises. And the code that does apply will need to be modified (sometimes quite heavily) to be able to run new analyses. Your job is to understand how the code works so that you can make changes to it without breaking things. If you don’t understand a piece of code, don’t copy and paste it until you’ve read and re-read the earlier exposition that explains how the code works.\n\nOne final note about copying and pasting. Sometimes, people will try to copy and paste code from the HTML output file. This is a bad idea. The HTML document uses special characters to make the output look pretty, but these characters don’t actually work as plain text in an Quarto. The same applies to things copied and pasted from a Word document or another website. If you need to copy and paste code, be sure to find the plain text Quarto file (the one with the .qmd extension here in RStudio) and copy and paste from that.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#conclusion",
    "href": "02-using_quarto-web.html#conclusion",
    "title": "2  Using Quarto",
    "section": "2.13 Conclusion",
    "text": "2.13 Conclusion\nThat’s it! There wasn’t too much you were asked to do for this assignment that will actually show up in the HTML output. (Make sure you did do the three things that were asked of you, however: one was adding your name and the date to the YAML header, one was typing something in the blue answer box, and the last was to make a section header appear properly.) As you gain confidence and as we move into more serious stats material, you will be asked to do a lot more.\n\n2.13.1 Preparing and submitting your assignment\nIf you look in your project folder, you should see three files:\n[a file with a .Rproj extension, either project.Rproj or intro_stats.Rproj]\n02-using_quarto.html\n02-using_quarto.qmd\nThe first file (with extension .Rproj) you were instructed never to touch.\nThe next file has extension .html. That is the pretty output file generated when you hit the “Render” button. This is the “final product” of your work.\nFinally, you have a file with extension .qmd. This is your Quarto file. It’s the file you’re looking at right now. It is really nothing more than a plain text file, although when you open it in RStudio, some magic allows you to see the output from the code chunks you run.\n(If you happen to see other files or folders in your project folder, you should ignore those and not mess with them.)\nThere are several steps that you should follow at the end of each of every chapter.\n\nFrom the “Run” menu, select “Restart R and Run All Chunks”.\nDeal with any code errors that crop up. Repeat steps 1–-2 until there are no more code errors.\nSpell check your document by clicking the icon with “ABC” and a check mark.\nHit the “Render” button one last time to generate the final draft of the HTML file. (If there are errors here, you may need to go back and fix broken inline code or other markdown issues.)\nProofread the HTML file carefully. If there are errors, go back and fix them, then repeat steps 1–5 again.\n\nIf you have completed this chapter as part of a statistics course, follow the directions you receive from your professor to submit your assignment.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "02-using_quarto-web.html#footnotes",
    "href": "02-using_quarto-web.html#footnotes",
    "title": "2  Using Quarto",
    "section": "",
    "text": "If you get an authorization error, that means you are accessing RStudio through a managed local server and you’ll need your admin to install the package for you.↩︎\nAlso called “pound signs” or “octothorpes”. This is also an example of formatting a footnote!↩︎\nIf you think these errors are trivial, Google ``Reinhart and Rogoff Excel error’’ to read about the catastrophic consequences of seemingly trivial Excel mistakes.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Using Quarto</span>"
    ]
  },
  {
    "objectID": "Rubric.html",
    "href": "Rubric.html",
    "title": "Appendix A — Rubric for inference",
    "section": "",
    "text": "Exploratory data analysis\n2.0\nThis is the R Markdown outline for running inference, both a hypothesis test and a confidence interval.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#exploratory-data-analysis",
    "href": "Rubric.html#exploratory-data-analysis",
    "title": "Appendix A — Rubric for inference",
    "section": "",
    "text": "Use data documentation (help files, code books, Google, etc.) to determine as much as possible about the data provenance and structure.\n\nPlease write up your answer here\n\n# Add code here to print the data\n\n\n# Add code here to glimpse the variables\n\n\n\n\nPrepare the data for analysis. [Not always necessary.]\n\n\n# Add code here to prepare the data for analysis.\n\n\n\n\nMake tables or plots to explore the data visually.\n\n\n# Add code here to make tables or plots.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#hypotheses",
    "href": "Rubric.html#hypotheses",
    "title": "Appendix A — Rubric for inference",
    "section": "Hypotheses",
    "text": "Hypotheses\n\nIdentify the sample (or samples) and a reasonable population (or populations) of interest.\n\nPlease write up your answer here.\n\n\n\nExpress the null and alternative hypotheses as contextually meaningful full sentences.\n\n\\(H_{0}:\\) Null hypothesis goes here.\n\\(H_{A}:\\) Alternative hypothesis goes here.\n\n\n\nExpress the null and alternative hypotheses in symbols (when possible).\n\n\\(H_{0}: math\\)\n\\(H_{A}: math\\)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#model",
    "href": "Rubric.html#model",
    "title": "Appendix A — Rubric for inference",
    "section": "Model",
    "text": "Model\n\nIdentify the sampling distribution model.\n\nPlease write up your answer here.\n\n\n\nCheck the relevant conditions to ensure that model assumptions are met.\n\nPlease write up your answer here. (Some conditions may require R code as well.)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#mechanics",
    "href": "Rubric.html#mechanics",
    "title": "Appendix A — Rubric for inference",
    "section": "Mechanics",
    "text": "Mechanics\n\nCompute the test statistic.\n\n\n# Add code here to compute the test statistic.\n\n\n\n\nReport the test statistic in context (when possible).\n\nPlease write up your answer here.\n\n\n\nPlot the null distribution.\n\n\n# IF CONDUCTING A SIMULATION...\nset.seed(1)\n# Add code here to simulate the null distribution.\n\n\n# Add code here to plot the null distribution.\n\n\n\n\nCalculate the P-value.\n\n\n# Add code here to calculate the P-value.\n\n\n\n\nInterpret the P-value as a probability given the null.\n\nPlease write up your answer here.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#conclusion",
    "href": "Rubric.html#conclusion",
    "title": "Appendix A — Rubric for inference",
    "section": "Conclusion",
    "text": "Conclusion\n\nState the statistical conclusion.\n\nPlease write up your answer here.\n\n\n\nState (but do not overstate) a contextually meaningful conclusion.\n\nPlease write up your answer here.\n\n\n\nExpress reservations or uncertainty about the generalizability of the conclusion.\n\nPlease write up your answer here.\n\n\n\nIdentify the possibility of either a Type I or Type II error and state what making such an error means in the context of the hypotheses.\n\nPlease write up your answer here.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Rubric.html#confidence-interval",
    "href": "Rubric.html#confidence-interval",
    "title": "Appendix A — Rubric for inference",
    "section": "Confidence interval",
    "text": "Confidence interval\n\nCheck the relevant conditions to ensure that model assumptions are met.\n\nPlease write up your answer here. (Some conditions may require R code as well.)\n\n\n\nCalculate and graph the confidence interval.\n\n\n# Add code here to calculate the confidence interval.\n\n\n# Add code here to graph the confidence interval.\n\n\n\n\nState (but do not overstate) a contextually meaningful interpretation.\n\nPlease write up your answer here.\n\n\n\nIf running a two-sided test, explain how the confidence interval reinforces the conclusion of the hypothesis test. [Not always applicable.]\n\nPlease write up your answer here.\n\n\n\nWhen comparing two groups, comment on the effect size and the practical significance of the result. [Not always applicable.]\n\nPlease write up your answer here.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Rubric for inference</span>"
    ]
  },
  {
    "objectID": "Concordance.html",
    "href": "Concordance.html",
    "title": "Appendix B — Concordance with Introduction to Modern Statistics (IMS)",
    "section": "",
    "text": "This book is meant to be somewhat aligned pedagogically with part of the book Introduction to Modern Statistics (IMS) by Mine Çetinkaya-Rundel and Johanna Hardin. But it’s not a perfect, one-to-one match. The table below shows the concordance between the two books with some notes that explain when one book does something different from the other.\n\n\n\n\n\n\n\n\nThis book\nIMS\nNotes\n\n\n\n\nCh. 1\n\nThis book contains a specific introduction to R and RStudio with some basic statistical vocabulary.\n\n\n\nCh. 1\nIMS introduces a lot of vocabulary. This book introduces most of that same vocabulary, but across multiple chapters.\n\n\nCh. 2\n\nThis book contains a specific introduction to R Markdown.\n\n\n\nCh. 2\nIMS discusses study design and sampling. Some of that information is scattered across multiple chapters of this book, but not all of it. (For example, this book doesn’t get into stratified or cluster sampling.)\n\n\n\nCh. 3\nIMS has “Applications” chapters at the end of each section. In this book, the applications are woven into each chapter.\n\n\nCh. 3\nCh. 4\nCategorical data.\n\n\nCh. 4\nCh. 5\nNumerical data.\n\n\nCh. 5\n\nThis book has a dedicated chapter on manipulating data using dplyr.\n\n\n\nCh. 6\nApplications.\n\n\nCh. 6\nCh. 7\nCorrelation.\n\n\nCh. 7\nCh. 7\nSimple linear regression.\n\n\n\nCh. 8\nMultiple regression—not covered in this book.\n\n\n\nCh. 9\nLogistic regression—not covered in this book.\n\n\n\nCh. 10\nApplications.\n\n\nCh. 8\nCh. 11\nIntroduction to randomization, Part 1—This book takes four chapters to cover the material that IMS covers in one chapter.\n\n\nCh. 9\nCh. 11\nIntroduction to randomization, Part 2.\n\n\nCh. 10\nCh. 11\nHypothesis testing with randomization, Part 1.\n\n\nCh. 11\nCh. 11\nHypothesis testing with randomization, Part 2.\n\n\nCh. 12\nCh. 12\nConfidence intervals.\n\n\nCh. 13\nCh. 13\nNormal models—This book takes two chapters to cover the material that IMS covers in one chapter.\n\n\nCh. 14\nCh. 13\nSampling distribution models.\n\n\n\nCh. 14\nIMS has a chapter on decision errors that was covered in this book back in Ch. 10. It also covers the concept of power, which is not covered in this book.\n\n\n\nCh. 15\nApplications.\n\n\nCh. 15\nCh. 16\nInference for one proportion.\n\n\nCh. 16\nCh. 17\nInference for two proportions.\n\n\nCh. 17\n\nChi-square goodness-of-fit test. (This is only covered in IMS in a standalone R tutorial appearing in Ch. 23.)\n\n\nCh. 18\nCh. 18\nChi-square test for independence.\n\n\nCh. 19\nCh. 19\nInference for one mean.\n\n\nCh. 20\nCh. 21\nInference for paired data.\n\n\nCh. 21\nCh. 20\nInference for two independent means.\n\n\nCh. 22\nCh. 22\nANOVA. This is the last chapter of this book.\n\n\n\nCh. 23\nApplications.\n\n\n\nCh. 24\nInference for linear regression with a single predictor.\n\n\n\nCh. 25\nInference for linear regression with multiple predictors.\n\n\n\nCh. 26\nInference for logistic regression.\n\n\n\nCh. 27\nApplications.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Concordance with *Introduction to Modern Statistics* (IMS)</span>"
    ]
  }
]